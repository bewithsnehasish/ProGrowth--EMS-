// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String
  role          Role      @default(EMPLOYEE)
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  tasks         Task[]
  assignedTasks Task[]    @relation("AssignedTo")
  leaveRequests Leave[]
  attendances   Attendance[]
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  bio       String?
  avatar    String?
  documents Document[]
}

model Document {
  id        String   @id @default(uuid())
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id])
  type      DocumentType
  url       String
  status    DocumentStatus @default(SUBMITTED)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(ASSIGNED)
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  assignedTo  User?     @relation("AssignedTo", fields: [assignedToId], references: [id])
  assignedToId String?
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   String
}

model Project {
  id          String    @id @default(uuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tasks       Task[]
}

model Leave {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  startDate DateTime
  endDate   DateTime
  reason    String?
  status    LeaveStatus @default(PENDING)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Attendance {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  date      DateTime
  status    AttendanceStatus
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum Role {
  EMPLOYEE
  MANAGER
  ADMIN
}

enum DocumentType {
  EDUCATIONAL
  EXPERIENCE
  TERMS_ACCEPTANCE
}

enum DocumentStatus {
  SUBMITTED
  APPROVED
  REJECTED
}

enum TaskStatus {
  ASSIGNED
  WORKING
  COMPLETED
  OVERDUE
  NOT_COMPLETED
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  HALF_DAY
}

console.log('Prisma schema created successfully.')
