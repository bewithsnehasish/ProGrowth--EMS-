// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  role          UserRole  @default(EMPLOYEE)
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Profile relation
  profile       Profile?

  // Activity relations
  documents     Document[]         @relation("UserDocuments")
  tasksAssigned Task[]            @relation("UserTasks")
  attendance    Attendance[]       @relation("UserAttendance")
  leaves        Leave[]           @relation("UserLeaves")
  salaries      Salary[]          @relation("UserSalaries")
  projectMembers ProjectMember[]  @relation("UserProjects")
  notifications Notification[]    @relation("UserNotifications")
  taskComments  TaskComment[]     @relation("UserComments")

  // Employee-Manager Relationship
  employeeProfile  Employee?       @relation("EmployeeToUser")
  managesEmployees Employee[]      @relation("ManagerToEmployee")
}

enum UserRole {
  EMPLOYEE
  MANAGER
  ADMIN
  FOUNDER
}

// Employee Profile
model Profile {
  id              String    @id @default(cuid())
  userId          String    @unique
  firstName       String
  lastName        String
  dateOfBirth     DateTime?
  gender          String?
  phone           String?
  address         String?
  emergencyContact String?
  
  // Professional Details
  employeeId      String    @unique
  department      String?
  designation     String?
  joinDate        DateTime  @default(now())
  
  // Bank Details
  bankName        String?
  accountNumber   String?
  ifscCode        String?
  
  // Profile Image
  profileImage    String?
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Document Management
model Document {
  id          String      @id @default(cuid())
  userId      String
  type        DocumentType
  name        String
  url         String
  status      VerificationStatus @default(PENDING)
  feedback    String?
  uploadedAt  DateTime    @default(now())
  verifiedAt  DateTime?
  
  // Relations
  user        User        @relation("UserDocuments", fields: [userId], references: [id])
}

enum DocumentType {
  EDUCATIONAL
  PROFESSIONAL
  PERSONAL
  OTHER
}

enum VerificationStatus {
  PENDING
  UNDER_REVIEW
  VERIFIED
  REJECTED
  RESUBMISSION_REQUIRED
}

// Project Management
model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  priority    Priority  @default(MEDIUM)
  status      ProjectStatus @default(PLANNING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  members     ProjectMember[]
  tasks       Task[]
}

model ProjectMember {
  id        String    @id @default(cuid())
  userId    String
  projectId String
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime  @default(now())

  // Relations
  user      User      @relation("UserProjects", fields: [userId], references: [id])
  project   Project   @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}

enum ProjectRole {
  LEADER
  MEMBER
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

// Task Management
model Task {
  id          String    @id @default(cuid())
  projectId   String?
  assignedTo  String
  title       String
  description String?
  dueDate     DateTime
  priority    Priority  @default(MEDIUM)
  status      TaskStatus @default(TODO)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Time tracking
  estimatedHours Float?
  actualHours    Float?
  
  // Relations
  project     Project?  @relation(fields: [projectId], references: [id])
  assignee    User      @relation("UserTasks", fields: [assignedTo], references: [id])
  comments    TaskComment[]
}

model TaskComment {
  id        String    @id @default(cuid())
  taskId    String
  userId    String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  task      Task      @relation(fields: [taskId], references: [id])
  user      User      @relation("UserComments", fields: [userId], references: [id])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Attendance Management
model Attendance {
  id          String    @id @default(cuid())
  userId      String
  date        DateTime  @default(now())
  checkIn     DateTime
  checkOut    DateTime?
  status      AttendanceStatus @default(PRESENT)
  workHours   Float?
  notes       String?

  // Relations
  user        User      @relation("UserAttendance", fields: [userId], references: [id])

  @@unique([userId, date])
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  HALF_DAY
  WORK_FROM_HOME
}

// Leave Management
model Leave {
  id          String    @id @default(cuid())
  userId      String
  startDate   DateTime
  endDate     DateTime
  type        LeaveType
  reason      String
  status      LeaveStatus @default(PENDING)
  approvedBy  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation("UserLeaves", fields: [userId], references: [id])
}

enum LeaveType {
  CASUAL
  SICK
  VACATION
  UNPAID
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

// Salary Management
model Salary {
  id              String    @id @default(cuid())
  userId          String
  month           DateTime
  basicSalary     Float
  allowances      Float     @default(0)
  deductions      Float     @default(0)
  bonus           Float     @default(0)
  netSalary       Float
  status          PaymentStatus @default(PENDING)
  paymentDate     DateTime?
  
  // Relations
  user            User      @relation("UserSalaries", fields: [userId], references: [id])

  @@unique([userId, month])
}

enum PaymentStatus {
  PENDING
  PROCESSED
  PAID
  FAILED
}

// Performance Management
model Performance {
  id              String    @id @default(cuid())
  employeeId      String    @unique
  taskCompletion  Float     @default(0)
  qualityScore    Float     @default(0)
  timelineScore   Float     @default(0)
  collaborationScore Float  @default(0)
  overallScore    Float     @default(0)
  reviewPeriod    DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Notification System
model Notification {
  id          String    @id @default(cuid())
  userId      String
  title       String
  message     String
  type        NotificationType
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())

  // Relations
  user        User      @relation("UserNotifications", fields: [userId], references: [id])
}

enum NotificationType {
  TASK
  LEAVE
  DOCUMENT
  ATTENDANCE
  SALARY
  GENERAL
}

// Company Structure
model Department {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Employee relation for hierarchy
model Employee {
  id          String    @id @default(cuid())
  userId      String    @unique
  managerId   String?
  
  // Relations
  user        User      @relation("EmployeeToUser", fields: [userId], references: [id])
  manager     User?     @relation("ManagerToEmployee", fields: [managerId], references: [id])
}

